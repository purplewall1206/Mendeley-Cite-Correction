@book{goossens93,
  author = "Frank Mittelbach and Michel Goossens and Johannes Braams and David Carlisle  and Chris Rowley",
  title = "The {LaTeX} Companion",
  year = "1993",
  publisher = "Addison-Wesley",
  address = "Reading, Massachusetts"
}
@article{schollwock2011,
  title = {The Density-Matrix Renormalization Group in the Age of Matrix Product States},
  author = {Schollwöck, Ulrich},
  date = {2011-01},
  journaltitle = {Annals of Physics},
  shortjournal = {Annals of Physics},
  volume = {326},
  number = {1},
  pages = {96--192},
  issn = {00034916},
  doi = {10.1016/j.aop.2010.09.012},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S0003491610001752},
  urldate = {2021-10-11},
  abstract = {The density-matrix renormalization group method (DMRG) has established itself over the last decade as the leading method for the simulation of the statics and dynamics of one-dimensional strongly correlated quantum lattice systems. In the further development of the method, the realization that DMRG operates on a highly interesting class of quantum states, so-called matrix product states (MPS), has allowed a much deeper understanding of the inner structure of the DMRG method, its further potential and its limitations. In this paper, I want to give a detailed exposition of current DMRG thinking in the MPS language in order to make the advisable implementation of the family of DMRG algorithms in exclusively MPS terms transparent. I then move on to discuss some directions of potentially fruitful further algorithmic development: while DMRG is a very mature method by now, I still see potential for further improvements, as exemplified by a number of recently introduced algorithms.},
  langid = {english}
}

@inproceedings{howtodesign_1976,
    author = {Fabry, R. S.},
    title = {How to Design a System in Which Modules Can Be Changed on the Fly},
    year = {1976},
    publisher = {IEEE Computer Society Press},
    address = {Washington, DC, USA},
    abstract = {In a system made up of many modules, each managing its own peculiar types of data structures, it is often necessary to update one of the modules so as to provide new features or an improvement in the internal organization. If the interface to the module is unchanged or merely augmented the programs which interact with the module need not be changed. If the system can be brought to an orderly halt and if the module does not manage permanent data structures, it will merely be necessary to recompile the modified module, relink the system, stop the old system, and install the new one. If the module does manage permanent data structures which must be modified and the system is one which is expected to continue operation throughout the change, the problem is more difficult, but it can be solved. This paper discusses a solution.},
    booktitle = {Proceedings of the 2nd International Conference on Software Engineering},
    pages = {470–476},
    numpages = {7},
    keywords = {Updating data representations, Capabilities, Computer utilities, Abstract data types},
    location = {San Francisco, California, USA},
    series = {ICSE '76}
}
@article{vandewoude_tranquility_2007,
	title = {Tranquility: {A} {Low} {Disruptive} {Alternative} to {Quiescence} for {Ensuring} {Safe} {Dynamic} {Updates}},
	volume = {33},
	issn = {1939-3520},
	shorttitle = {Tranquility},
	doi = {10.1109/TSE.2007.70733},
	abstract = {This paper revisits a problem that was identified by Kramer and Magee: placing a system in a consistent state before and after runtime changes. We show that their notion of quiescence as a necessary and sufficient condition for safe runtime changes is too strict and results in a significant disruption in the application being updated. In this paper, we introduce a weaker condition: tranquillity. We show that tranquillity is easier to obtain and less disruptive for the running application but still a sufficient condition to ensure application consistency. We present an implementation of our approach on a component middleware platform and experimentally verify the validity and practical applicability of our approach using data retrieved from a case study.},
	number = {12},
	journal = {IEEE Transactions on Software Engineering},
	author = {Vandewoude, Yves and Ebraert, Peter and Berbers, Yolande and D'Hondt, Theo},
	month = dec,
	year = {2007},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	keywords = {Application software, Application-aware adaptation, components, Componentware, Computer languages, containers, Containers, Distributed objects, Information retrieval, Middleware, Operating systems, Runtime, Software engineering, Software systems, Sufficient conditions},
	pages = {856--868},
	file = {IEEE Xplore Full Text PDF:/home/sonnet/Zotero/storage/TVZZQ7EG/Vandewoude 等。 - 2007 - Tranquility A Low Disruptive Alternative to Quies.pdf:application/pdf},
}

@inproceedings{ajmani_modular_2006,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Modular {Software} {Upgrades} for {Distributed} {Systems}},
	isbn = {978-3-540-35727-8},
	doi = {10.1007/11785477_26},
	abstract = {Upgrading the software of long-lived, highly-available distributed systems is difficult. It is not possible to upgrade all the nodes in a system at once, since some nodes may be unavailable and halting the system for an upgrade is unacceptable. Instead, upgrades must happen gradually, and there may be long periods of time when different nodes run different software versions and need to communicate using incompatible protocols. We present a methodology and infrastructure that make it possible to upgrade distributed systems automatically while limiting service disruption. We introduce new ways to reason about correctness in a multi-version system. We also describe a prototype implementation that supports automatic upgrades with modest overhead.},
	language = {en},
	booktitle = {{ECOOP} 2006 – {Object}-{Oriented} {Programming}},
	publisher = {Springer},
	author = {Ajmani, Sameer and Liskov, Barbara and Shrira, Liuba},
	editor = {Thomas, Dave},
	year = {2006},
	keywords = {Current Object, Permission System, Simulation Object, Transform Function, Version Number},
	pages = {452--476},
	file = {Springer Full Text PDF:/home/sonnet/Zotero/storage/FC9JMAZV/Ajmani 等。 - 2006 - Modular Software Upgrades for Distributed Systems.pdf:application/pdf},
}

@inproceedings{dumitras_why_2009,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Why {Do} {Upgrades} {Fail} and {What} {Can} {We} {Do} about {It}?},
	isbn = {978-3-642-10445-9},
	doi = {10.1007/978-3-642-10445-9_18},
	abstract = {Enterprise-system upgrades are unreliable and often produce downtime or data-loss. Errors in the upgrade procedure, such as broken dependencies, constitute the leading cause of upgrade failures. We propose a novel upgrade-centric fault model, based on data from three independent sources, which focuses on the impact of procedural errors rather than software defects. We show that current approaches for upgrading enterprise systems, such as rolling upgrades, are vulnerable to these faults because the upgrade is not an atomic operation and it risks breaking hidden dependencies among the distributed system-components. We also present a mechanism for tolerating complex procedural errors during an upgrade. Our system, called Imago, improves availability in the fault-free case, by performing an online upgrade, and in the faulty case, by reducing the risk of failure due to breaking hidden dependencies. Imago performs an end-to-end upgrade atomically and dependably by dedicating separate resources to the new version and by isolating the old version from the upgrade procedure. Through fault injection, we show that Imago is more reliable than online-upgrade approaches that rely on dependency-tracking and that create system states with mixed versions.},
	language = {en},
	booktitle = {Middleware 2009},
	publisher = {Springer},
	author = {Dumitraş, Tudor and Narasimhan, Priya},
	editor = {Bacon, Jean M. and Cooper, Brian F.},
	year = {2009},
	keywords = {Application Server, Atomic Operation, Enterprise System, Latent Error, Software Defect},
	pages = {349--372},
	file = {Springer Full Text PDF:/home/sonnet/Zotero/storage/N6TRXFVY/Dumitraş 和 Narasimhan - 2009 - Why Do Upgrades Fail and What Can We Do about It.pdf:application/pdf},
}

@inproceedings{makris_immediate_2009,
	title = {Immediate {Multi}-{Threaded} {Dynamic} {Software} {Updates} {Using} {Stack} {Reconstruction}.},
	volume = {2009},
	booktitle = {{USENIX} {Annual} {Technical} {Conference}},
	publisher = {San Diego, CA},
	author = {Makris, Kristis and Bazzi, Rida A.},
	year = {2009},
	keywords = {unread},
	file = {Full Text:/home/sonnet/Zotero/storage/NJ8GECU2/Makris 和 Bazzi - 2009 - Immediate Multi-Threaded Dynamic Software Updates .pdf:application/pdf},
}

@article{giuffrida_safe_nodate,
	title = {Safe and {Automatic} {Live} {Update}},
	language = {en},
	author = {Giuffrida, Cristiano},
	pages = {225},
	file = {Giuffrida - Safe and Automatic Live Update.pdf:/home/sonnet/Zotero/storage/LHAEN6EJ/Giuffrida - Safe and Automatic Live Update.pdf:application/pdf},
}

@misc{noauthor_mutable_nodate,
	title = {Mutable {Checkpoint}-{Restart}: {Automating} {Live} {Update} for {Generic} {Server} {Programs}},
	url = {https://bibbase.org/network/publication/giuffrida-iorgulescu-tanenbaum-mutablecheckpointrestartautomatingliveupdateforgenericserverprograms-2014},
	urldate = {2021-05-18},
	file = {Mutable Checkpoint-Restart Automating Live Update.pdf:/home/sonnet/Zotero/storage/YWYS447C/Mutable Checkpoint-Restart Automating Live Update.pdf:application/pdf;Mutable Checkpoint-Restart\: Automating Live Update for Generic Server Programs:/home/sonnet/Zotero/storage/ZKISI8M6/giuffrida-iorgulescu-tanenbaum-mutablecheckpointrestartautomatingliveupdateforgenericserverprog.html:text/html},
}

@misc{noauthor_automating_nodate,
	title = {Automating {Live} {Update} for {Generic} {Server} {Programs}},
	url = {https://bibbase.org/network/publication/giuffrida-iorgulescu-tamburrelli-tanenbaum-automatingliveupdateforgenericserverprograms-2017},
	urldate = {2021-05-18},
	file = {Automating Live Update for Generic Server Programs.pdf:/home/sonnet/Zotero/storage/PNXNZU99/Automating Live Update for Generic Server Programs.pdf:application/pdf;Automating Live Update for Generic Server Programs:/home/sonnet/Zotero/storage/IUU35F4P/giuffrida-iorgulescu-tamburrelli-tanenbaum-automatingliveupdateforgenericserverprograms-2017.html:text/html},
}

@misc{noauthor_update_nodate,
	title = {An update on live kernel patching [{LWN}.net]},
	url = {https://lwn.net/Articles/734765/},
	urldate = {2021-04-26},
	keywords = {Unread},
	file = {An update on live kernel patching [LWN.net]:/home/sonnet/Zotero/storage/S2UUDHEU/734765.html:text/html},
}

@article{seifzadeh_survey_2013,
	title = {A survey of dynamic software updating},
	volume = {25},
	number = {5},
	journal = {Journal of Software: Evolution and Process},
	author = {Seifzadeh, Habib and Abolhassani, Hassan and Moshkenani, Mohsen Sadighi},
	year = {2013},
	note = {Publisher: Wiley Online Library},
	keywords = {Unread},
	pages = {535--568},
	file = {Snapshot:/home/sonnet/Zotero/storage/F4JGFZ35/smr.html:text/html},
}

@inproceedings{giuffrida_taxonomy_2010,
	title = {A taxonomy of live updates},
	booktitle = {Proc. of the 16th {ASCI} {Conf}},
	author = {Giuffrida, Cristiano and Tanenbaum, Andrew S.},
	year = {2010},
	keywords = {Unread},
	file = {Full Text:/home/sonnet/Zotero/storage/HRQEJYZ2/Giuffrida 和 Tanenbaum - 2010 - A taxonomy of live updates.pdf:application/pdf},
}

@inproceedings{giuffrida_back_2013,
	title = {Back to the future: {Fault}-tolerant live update with time-traveling state transfer},
	shorttitle = {Back to the future},
	booktitle = {27th {Large} {Installation} {System} {Administration} {Conference} (\$\{\${LISA}\$\}\$ 13)},
	author = {Giuffrida, Cristiano and Iorgulescu, Calin and Kuijsten, Anton and Tanenbaum, Andrew S.},
	year = {2013},
	keywords = {Unread},
	pages = {89--104},
	file = {Snapshot:/home/sonnet/Zotero/storage/X7C4R8YX/giuffrida.html:text/html;Full Text:/home/sonnet/Zotero/storage/K6R6TMEI/Giuffrida 等。 - 2013 - Back to the future Fault-tolerant live update wit.pdf:application/pdf},
}

@inproceedings{payer_dynsec_2013,
	title = {{DynSec}: {On}-the-fly {Code} {Rewriting} and {Repair}},
	shorttitle = {{DynSec}},
	booktitle = {5th {Workshop} on {Hot} {Topics} in {Software} {Upgrades} ({HotSWUp} 13)},
	author = {Payer, Mathias and Bluntschli, Boris and Gross, Thomas R.},
	year = {2013},
	keywords = {Unread},
	file = {Snapshot:/home/sonnet/Zotero/storage/77X7HPGI/payer.html:text/html;Full Text:/home/sonnet/Zotero/storage/SVSEM6B3/Payer 等。 - 2013 - DynSec On-the-fly Code Rewriting and Repair.pdf:application/pdf},
}

@inproceedings{kashyap_instant_2016,
	title = {Instant \$\{\${OS}\$\}\$ {Updates} via {Userspace} {Checkpoint}-and-{Restart}},
	booktitle = {2016 \$\{\${USENIX}\$\}\$ {Annual} {Technical} {Conference} (\$\{\${USENIX}\$\}\$\$\{\${ATC}\$\}\$ 16)},
	author = {Kashyap, Sanidhya and Min, Changwoo and Lee, Byoungyoung and Kim, Taesoo and Emelyanov, Pavel},
	year = {2016},
	keywords = {Unread},
	pages = {605--619},
	file = {Snapshot:/home/sonnet/Zotero/storage/GRTZ5GRB/kashyap.html:text/html;Full Text:/home/sonnet/Zotero/storage/WPTB2H6D/Kashyap 等。 - 2016 - Instant \$ \$OS\$ \$ Updates via Userspace Checkpoint-.pdf:application/pdf;Kashyap 等。 - 2016 - Instant \$ \$OS\$ \$ Updates via Userspace Checkpoint-.pdf:/home/sonnet/Zotero/storage/VCAFQZ9R/Kashyap 等。 - 2016 - Instant \$ \$OS\$ \$ Updates via Userspace Checkpoint-.pdf:application/pdf},
}

@inproceedings{ramaswamy_katana_2010,
	title = {Katana: {A} {Hot} {Patching} {Framework} for {ELF} {Executables}},
	shorttitle = {Katana},
	doi = {10.1109/ARES.2010.112},
	abstract = {Despite advances in software modularity, security, and reliability,offline patching remains the predominant form of updating or protecting commodity software. Unfortunately, the mechanics of hot patching (the process of upgrading a program while it executes) remain understudied, even though such a capability offers practical benefits for both consumer and mission-critical systems. A reliable hot patching procedure would serve particularly well by reducing the downtime necessary for critical functionality or security upgrades. Yet, hot patching also carries the risk – real or perceived – of leaving the system in an inconsistent state, which leads many owners to forego its benefits as too risky. In this paper, we propose a novel method for hot patching ELF binaries that supports (a) synchronized global data and code updates and (b)reasoning about the results of applying the hot patch. We propose a format, which we call a Patch Object, for encoding patches as a special type of ELF relocatable object file. Our tool, Katana, automatically creates these patch objects as a by-product of the standard source build process. Katana also allows an end-user to apply the Patch Objects to a running process. In essence, our method can be viewed as an extension of the Application Binary Interface (ABI), and we argue for its inclusion in future ABI standards.},
	booktitle = {2010 {International} {Conference} on {Availability}, {Reliability} and {Security}},
	author = {Ramaswamy, A. and Bratus, S. and Smith, S. W. and Locasto, M. E.},
	month = feb,
	year = {2010},
	keywords = {Application software, Unread, Availability, Computer science, Computer security, Educational institutions, ELF, Encoding, Geophysical measurement techniques, Ground penetrating radar, Hotpatching, Mission critical systems, Protection, self-healing},
	pages = {507--512},
	file = {IEEE Xplore Full Text PDF:/home/sonnet/Zotero/storage/UE9FH54P/Ramaswamy 等。 - 2010 - Katana A Hot Patching Framework for ELF Executabl.pdf:application/pdf;IEEE Xplore Abstract Record:/home/sonnet/Zotero/storage/96U3F5IK/5438048.html:text/html},
}

@inproceedings{hayden_kitsune_2012,
	title = {Kitsune: {Efficient}, general-purpose dynamic software updating for {C}},
	shorttitle = {Kitsune},
	booktitle = {Proceedings of the {ACM} international conference on {Object} oriented programming systems languages and applications},
	author = {Hayden, Christopher M. and Smith, Edward K. and Denchev, Michail and Hicks, Michael and Foster, Jeffrey S.},
	year = {2012},
	keywords = {Unread},
	pages = {249--264},
	file = {Snapshot:/home/sonnet/Zotero/storage/ZV7ETQB5/2384616.html:text/html;Full Text:/home/sonnet/Zotero/storage/YXU4DGVV/Hayden 等。 - 2012 - Kitsune Efficient, general-purpose dynamic softwa.pdf:application/pdf},
}

@article{poimboeuf2014introducing,
  title={Introducing kpatch: Dynamic kernel patching},
  author={Poimboeuf, Josh and Jennings, Seth},
  journal={Red Hat Enterprise Linux Blog},
  volume={26},
  year={2014}
}

@misc{kgraft,
    author = {Jiri Kosina, Vojtech Pavlik, Jiri Slaby},
    title = {kGraft},
    year = 2013,
    howpublished = {\url{https://git.kernel.org/pub/scm/linux/kernel/git/jirislaby/kgraft.git/}},
    note = {Accessed: 2022-03-11}
}
@misc{ftrace,
    author = {Steven Rostedt},
    title = {ftrace},
    year = 2008,
    howpublished = {\url{https://www.kernel.org/doc/html/latest/trace/ftrace.html}},
    note = {Accessed: 2022-03-11}
}

@misc{livepatch_consistency_model,
    author = {Josh Poimboeuf},
    title = {livepatch:consistency model},
    year = 2015,
    howpublished = {\url{https://lwn.net/Articles/632582/}},
    note = {Accessed: 2022-03-12}
}

@misc{linux_annual2021,
    author = {{The Linux Foundation}},
    title = {The Linux Foundation Annual Report 2021},
    year = 2021,
    howpublished = {\url{https://linuxfoundation.org/wp-content/uploads/2021_LF_Annual_Report_010222.pdf}},
    note = {Accessed: 2022-03-12}
}


@inproceedings{zhou_kshot_2020,
	address = {Valencia, Spain},
	title = {{KShot}: {Live} {Kernel} {Patching} with {SMM} and {SGX}},
	isbn = {978-1-72815-809-9},
	shorttitle = {{KShot}},
	url = {https://ieeexplore.ieee.org/document/9153415/},
	doi = {10.1109/DSN48063.2020.00021},
	urldate = {2021-04-06},
	booktitle = {2020 50th {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	publisher = {IEEE},
	author = {Zhou, Lei and Zhang, Fengwei and Liao, Jinghui and Ning, Zhengyu and Xiao, Jidong and Leach, Kevin and Weimer, Westley and Wang, Guojun},
	month = jun,
	year = {2020},
	keywords = {Unread},
	pages = {1--13},
	file = {Zhou 等。 - 2020 - KShot Live Kernel Patching with SMM and SGX.pdf:/home/sonnet/Zotero/storage/ISMVW6SB/Zhou 等。 - 2020 - KShot Live Kernel Patching with SMM and SGX.pdf:application/pdf},
}

@inproceedings{arnold_ksplice_2009,
	title = {Ksplice: {Automatic} rebootless kernel updates},
	shorttitle = {Ksplice},
	booktitle = {Proceedings of the 4th {ACM} {European} conference on {Computer} systems},
	author = {Arnold, Jeff and Kaashoek, M. Frans},
	year = {2009},
	keywords = {Unread},
	pages = {187--198},
	file = {Snapshot:/home/sonnet/Zotero/storage/LZJD6PAA/1519065.html:text/html;Full Text:/home/sonnet/Zotero/storage/2342RP67/Arnold 和 Kaashoek - 2009 - Ksplice Automatic rebootless kernel updates.pdf:application/pdf},
}

@inproceedings{giuffrida_safe_2012,
	title = {Safe and automated state transfer for secure and reliable live update},
	booktitle = {2012 4th {International} {Workshop} on {Hot} {Topics} in {Software} {Upgrades} ({HotSWUp})},
	publisher = {IEEE},
	author = {Giuffrida, Cristiano and Tanenbaum, Andrew S.},
	year = {2012},
	keywords = {Unread},
	pages = {16--20},
	file = {Snapshot:/home/sonnet/Zotero/storage/6GRD5R2W/6226610.html:text/html;Full Text:/home/sonnet/Zotero/storage/YWQX5H2J/Giuffrida 和 Tanenbaum - 2012 - Safe and automated state transfer for secure and r.pdf:application/pdf},
}

@article{giuffrida_safe_2013,
	title = {Safe and automatic live update for operating systems},
	volume = {48},
	number = {4},
	journal = {ACM Sigplan Notices},
	author = {Giuffrida, Cristiano and Kuijsten, Anton and Tanenbaum, Andrew S.},
	year = {2013},
	note = {Publisher: ACM New York, NY, USA},
	keywords = {Unread},
	pages = {279--292},
	file = {Snapshot:/home/sonnet/Zotero/storage/6MP95M6G/2499368.html:text/html;Full Text:/home/sonnet/Zotero/storage/KWZ8NHL9/Giuffrida 等。 - 2013 - Safe and automatic live update for operating syste.pdf:application/pdf},
}

@inproceedings{siniavine_seamless_2013,
	title = {Seamless kernel updates},
	booktitle = {2013 43rd {Annual} {IEEE}/{IFIP} {International} {Conference} on {Dependable} {Systems} and {Networks} ({DSN})},
	publisher = {IEEE},
	author = {Siniavine, Maxim and Goel, Ashvin},
	year = {2013},
	keywords = {Unread},
	pages = {1--12},
	file = {Snapshot:/home/sonnet/Zotero/storage/8ZNMCLIJ/6575312.html:text/html;Full Text:/home/sonnet/Zotero/storage/3VDPK8A5/Siniavine 和 Goel - 2013 - Seamless kernel updates.pdf:application/pdf},
}

@inproceedings{farhang_take_2018,
	address = {San Juan PR USA},
	title = {Take {It} or {Leave} {It}: {A} {Survey} {Study} on {Operating} {System} {Upgrade} {Practices}},
	isbn = {978-1-4503-6569-7},
	shorttitle = {Take {It} or {Leave} {It}},
	url = {https://dl.acm.org/doi/10.1145/3274694.3274733},
	doi = {10.1145/3274694.3274733},
	language = {en},
	urldate = {2021-04-19},
	booktitle = {Proceedings of the 34th {Annual} {Computer} {Security} {Applications} {Conference}},
	publisher = {ACM},
	author = {Farhang, Sadegh and Weidman, Jake and Kamani, Mohammad Mahdi and Grossklags, Jens and Liu, Peng},
	month = dec,
	year = {2018},
	keywords = {Unread},
	pages = {490--504},
	file = {全文:/home/sonnet/Zotero/storage/ZWRGT3C2/Farhang 等。 - 2018 - Take It or Leave It A Survey Study on Operating S.pdf:application/pdf},
}

@inproceedings{mccanne_bsd_1993,
	address = {USA},
	series = {{USENIX}'93},
	title = {The {BSD} packet filter: a new architecture for user-level packet capture},
	shorttitle = {The {BSD} packet filter},
	abstract = {Many versions of Unix provide facilities for user-level packet capture, making possible the use of general purpose workstations for network monitoring. Because network monitors run as user-level processes, packets must be copied across the kernel/user-space protection boundary. This copying can be minimized by deploying a kernel agent called a packet filter, which discards unwanted packets as early as possible. The original Unix packet filter was designed around a stack-based filter evaluator that performs sub-optimally on current RISC CPUs. The BSD Packet Filter (BPF) uses a new, register-based filter evaluator that is up to 20 times faster than the original design. BPF alson uses a straighforward buffering strategy that makes its overall performance up to 100 times faster than Sun's NIT running on the same hardware.},
	urldate = {2021-04-19},
	booktitle = {Proceedings of the {USENIX} {Winter} 1993 {Conference} {Proceedings} on {USENIX} {Winter} 1993 {Conference} {Proceedings}},
	publisher = {USENIX Association},
	author = {McCanne, Steven and Jacobson, Van},
	month = jan,
	year = {1993},
	keywords = {Unread},
	pages = {2},
}

@inproceedings{jiang_will_2013,
	address = {San Francisco, CA, USA},
	title = {Will my patch make it? {And} how fast? {Case} study on the {Linux} kernel},
	isbn = {978-1-4673-2936-1 978-1-4799-0345-0},
	shorttitle = {Will my patch make it?},
	url = {http://ieeexplore.ieee.org/document/6624016/},
	doi = {10.1109/MSR.2013.6624016},
	urldate = {2021-04-06},
	booktitle = {2013 10th {Working} {Conference} on {Mining} {Software} {Repositories} ({MSR})},
	publisher = {IEEE},
	author = {Jiang, Yujuan and Adams, Bram and German, Daniel M.},
	month = may,
	year = {2013},
	keywords = {Unread},
	pages = {101--110},
}

@inproceedings{alglave_frightening_2018,
	address = {Williamsburg VA USA},
	title = {Frightening {Small} {Children} and {Disconcerting} {Grown}-ups: {Concurrency} in the {Linux} {Kernel}},
	isbn = {978-1-4503-4911-6},
	shorttitle = {Frightening {Small} {Children} and {Disconcerting} {Grown}-ups},
	url = {https://dl.acm.org/doi/10.1145/3173162.3177156},
	doi = {10.1145/3173162.3177156},
	abstract = {Concurrency in the Linux kernel can be a contentious topic. The Linux kernel mailing list features numerous discussions related to consistency models, including those of the more than 30 CPU architectures supported by the kernel and that of the kernel itself. How are Linux programs supposed to behave? Do they behave correctly on exotic hardware? A formal model can help address such questions. Better yet, an executable model allows programmers to experiment with the model to develop their intuition. Thus we offer a model written in the cat language, making it not only formal, but also executable by the herd simulator. We tested our model against hardware and refined it in consultation with maintainers. Finally, we formalised the fundamental law of the Read-Copy-Update synchronisation mechanism, and proved that one of its implementations satisfies this law.},
	language = {en},
	urldate = {2021-12-13},
	booktitle = {Proceedings of the {Twenty}-{Third} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}},
	publisher = {ACM},
	author = {Alglave, Jade and Maranget, Luc and McKenney, Paul E. and Parri, Andrea and Stern, Alan},
	month = mar,
	year = {2018},
	pages = {405--418},
	file = {Alglave 等。 - 2018 - Frightening Small Children and Disconcerting Grown.pdf:/home/sonnet/Zotero/storage/BLZD793C/Alglave 等。 - 2018 - Frightening Small Children and Disconcerting Grown.pdf:application/pdf},
}

@article{zarrabi_linux_2013,
	title = {Linux {Support} for {Fast} {Transparent} {General} {Purpose} {Checkpoint}/{Restart} of {Multithreaded} {Processes} in {Loadable} {Kernel} {Module}},
	volume = {11},
	copyright = {2013 Springer Science+Business Media Dordrecht},
	issn = {1572-9184},
	url = {https://link.springer.com/article/10.1007/s10723-013-9248-5},
	doi = {10.1007/s10723-013-9248-5},
	abstract = {Checkpoint/Restart is the ability to save the state of a running application so that it can later resume its execution from the time of the checkpoint. These are techniques with many potential applications, including establishment of a fault-tolerant environment, improving system resource utilization, and true migration of a process. With increasing hardware speed and size of clusters the average time between failures has been reduced. Therefore, fault tolerance and ability to checkpoint a process have become inevitable. Almost all platforms deployed for high-performance computing support process checkpoint/restart. Linux as one of the popular operating systems does not provide a general purpose implementation. Some are limited to specific type of parallel programming library, confined to some unique well-behaved type of applications, or reliant on specific features in kernel which could be missing on many occasions. Most of implementations demand elaborate practice of recompiling a whole kernel to apply required patches. In this paper, we describe the design and implementation of multithreaded process checkpoint/restart system for Linux which provide capability of dynamic extension to increase compatibility and reduce system overhead. It does not impose any requirement on the existence of a special facility in the operating system and can do checkpoint/restart of an application independent of their behavior and fully transparent. The entire system is absolutely implemented in multiple kernel loadable modules, which result in ease of use and eliminate the burden of complex system administration.},
	language = {en},
	number = {2},
	urldate = {2021-12-13},
	journal = {J Grid Computing},
	author = {Zarrabi, Amirreza and Samsudin, Khairulmizam and Wan Adnan, Wan Azizun},
	month = jun,
	year = {2013},
	note = {Company: Springer
Distributor: Springer
Institution: Springer
Label: Springer
Number: 2
Publisher: Springer Netherlands},
	pages = {187--210},
	file = {Full Text PDF:/home/sonnet/Zotero/storage/SG3ZR5DC/Zarrabi 等。 - 2013 - Linux Support for Fast Transparent General Purpose.pdf:application/pdf;Snapshot:/home/sonnet/Zotero/storage/UWPKQG93/10.html:text/html},
}

@article{neamtiu_practical_nodate,
	title = {Practical {Dynamic} {Software} {Updating} for {C}},
	abstract = {Software updates typically require stopping and restarting an application, but many systems cannot afford to halt service, or would prefer not to. Dynamic software updating (DSU) addresses this difﬁculty by permitting programs to be updated while they run. DSU is appealing compared to other approaches for on-line upgrades because it is quite general and requires no redundant hardware. The challenge is in making DSU practical: it should be ﬂexible, and yet safe, efﬁcient, and easy to use.},
	language = {en},
	author = {Neamtiu, Iulian and Hicks, Michael and Stoyle, Gareth and Oriol, Manuel},
	pages = {12},
	file = {Neamtiu 等。 - Practical Dynamic Software Updating for C.pdf:/home/sonnet/Zotero/storage/BVV247ZM/Neamtiu 等。 - Practical Dynamic Software Updating for C.pdf:application/pdf},
}

@misc{noauthor_free_nodate,
	title = {Free certifications for developers - {Marko} {Denic} - {Web} {Developer}},
	url = {https://markodenic.com/free-certifications-for-developers/},
	urldate = {2022-02-20},
	file = {Free certifications for developers - Marko Denic - Web Developer:/home/sonnet/Zotero/storage/M8LF3FCE/free-certifications-for-developers.html:text/html},
}

@article{shameli-sendi_understanding_2021,
	title = {Understanding {Linux} kernel vulnerabilities},
	volume = {17},
	issn = {2263-8733},
	url = {https://link.springer.com/10.1007/s11416-021-00379-x},
	doi = {10.1007/s11416-021-00379-x},
	language = {en},
	number = {4},
	urldate = {2022-02-21},
	journal = {J Comput Virol Hack Tech},
	author = {Shameli-Sendi, Alireza},
	month = dec,
	year = {2021},
	pages = {265--278},
	file = {Shameli-Sendi - 2021 - Understanding Linux kernel vulnerabilities.pdf:/home/sonnet/Zotero/storage/MLV4QQDF/Shameli-Sendi - 2021 - Understanding Linux kernel vulnerabilities.pdf:application/pdf},
}

@article{mu_-depth_nodate,
	title = {An {In}-depth {Analysis} of {Duplicated} {Linux} {Kernel} {Bug} {Reports}},
	abstract = {In the past three years, the continuous fuzzing projects Syzkaller and Syzbot have achieved great success in detecting kernel vulnerabilities, finding more kernel bugs than those found in the past 20 years. However, a side effect of continuous fuzzing is that it generates an excessive number of crash reports, many of which are “duplicated” reports caused by the same bug. While Syzbot uses a simple heuristic to group (deduplicate) reports, we find that it is often inaccurate. In this paper, we empirically analyze the duplicated kernel bug reports to understand: (1) the prevalence of duplication; (2) the potential costs introduced by duplication; and (3) the key causes behind the duplication problem. We collected all of the fixed kernel bugs from September 2017 to November 2020, including 3.24 million crash reports grouped by Syzbot under 2,526 bug reports (identified by unique bug titles). We found the bug reports indeed had duplication: 47.1\% of the 2,526 bug reports are duplicated with one or more other reports. By analyzing the metadata of these reports, we found undetected duplication introduced extra costs in terms of time and developer efforts. Then we organized Linux kernel experts to analyze a sample of duplicated bugs (375 bug reports, unique 120 bugs) and identified 6 key contributing factors to the duplication. Based on these empirical findings, we proposed and prototyped actionable strategies for bug deduplication. After confirming their effectiveness using a ground-truth dataset, we further applied our methods and identified previously unknown duplication cases among open bugs.},
	language = {en},
	author = {Mu, Dongliang and Wu, Yuhang and Lin, Zhenpeng and Chen, Yueqi and Yu, Chensheng and Xing, Xinyu and Wang, Gang},
	pages = {18},
	file = {Mu 等。 - An In-depth Analysis of Duplicated Linux Kernel Bu.pdf:/home/sonnet/Zotero/storage/SUCRG25J/Mu 等。 - An In-depth Analysis of Duplicated Linux Kernel Bu.pdf:application/pdf},
}

@inproceedings{kim_vulnerability_2009,
	title = {A vulnerability recommendation system in linux kernel variables},
	doi = {10.1109/FUZZY.2009.5277421},
	abstract = {In these days, Linux system is widely used because of its freedom to use and develop. With this trend, to find vulnerabilities in Linux kernel has become more important. Linux kernel is so huge that we need a machine based error detecting approach. There are some former studies about error detection in software code. However, they are not suitable for detecting unknown vulnerabilities related to Linux kernel variables. We suggest a vulnerability recommendation system for Linux kernel variables. First, we propose a methodology by analyzing 368 reported vulnerabilities in Linux kernel. We focus on two elements to find vulnerabilities in Linux kernel variables. Those are the kernel variables which are concerned about privilege escalating and the system call tree information that shows which system calls may modify which kernel variables. We tested our recommendation system with two representative Linux versions. Through experiments, we confirm that our system can find potential vulnerabilities including known ones.},
	booktitle = {2009 {IEEE} {International} {Conference} on {Fuzzy} {Systems}},
	author = {Kim, Jaekwang and Kim, Bo Kyeong and Lee, Seunghun and Lee, Jee-Hyong},
	year = {2009},
	note = {ISSN: 1098-7584},
	keywords = {Operating systems, Kernel, Linux, Computer errors, Embedded system, Intelligent systems, Pattern matching, System testing},
	pages = {92--97},
	file = {IEEE Xplore Full Text PDF:/home/sonnet/Zotero/storage/VXGQPKUN/Kim 等。 - 2009 - A vulnerability recommendation system in linux ker.pdf:application/pdf;IEEE Xplore Abstract Record:/home/sonnet/Zotero/storage/76IZUMSR/5277421.html:text/html},
}

@article{sagi_design_2022,
	title = {A design space for {RDF} data representations},
	issn = {1066-8888, 0949-877X},
	url = {https://link.springer.com/10.1007/s00778-021-00725-x},
	doi = {10.1007/s00778-021-00725-x},
	abstract = {RDF triplestores’ ability to store and query knowledge bases augmented with semantic annotations has attracted the attention of both research and industry. A multitude of systems offer varying data representation and indexing schemes. However, as recently shown for designing data structures, many design choices are biased by outdated considerations and may not result in the most efﬁcient data representation for a given query workload. To overcome this limitation, we identify a novel three-dimensional design space. Within this design space, we map the trade-offs between different RDF data representations employed as part of an RDF triplestore and identify unexplored solutions. We complement the review with an empirical evaluation of ten standard SPARQL benchmarks to examine the prevalence of these access patterns in synthetic and real query workloads. We ﬁnd some access patterns, to be both prevalent in the workloads and under-supported by existing triplestores. This shows the capabilities of our model to be used by RDF store designers to reason about different design choices and allow a (possibly artiﬁcially intelligent) designer to evaluate the ﬁt between a given system design and a query workload.},
	language = {en},
	urldate = {2022-02-22},
	journal = {The VLDB Journal},
	author = {Sagi, Tomer and Lissandrini, Matteo and Pedersen, Torben Bach and Hose, Katja},
	month = jan,
	year = {2022},
	file = {Sagi 等。 - 2022 - A design space for RDF data representations.pdf:/home/sonnet/Zotero/storage/H8UWPED5/Sagi 等。 - 2022 - A design space for RDF data representations.pdf:application/pdf},
}

@article{reddy_correctness_2004,
	title = {Correctness of data representations involving heap data structures},
	volume = {50},
	issn = {01676423},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0167642304000085},
	doi = {10.1016/j.scico.2004.01.007},
	abstract = {While the semantics of local variables in programming languages is by now well-understood, the semantics of pointer-addressed heap variables is still an outstanding issue. In particular, the commonly assumed relational reasoning principles for data representations have not been validated in a semantic model of heap variables. In this paper, we deÿne a parametricity semantics for a Pascal-like language with pointers and heap variables which gives such reasoning principles. It turns out that the correspondences between data representations cannot simply be relations between states, but more intricate correspondences that also need to keep track of visible locations whose pointers can be stored and leaked.},
	language = {en},
	number = {1-3},
	urldate = {2022-02-22},
	journal = {Science of Computer Programming},
	author = {Reddy, Uday S. and Yang, Hongseok},
	month = mar,
	year = {2004},
	pages = {129--160},
	file = {Reddy 和 Yang - 2004 - Correctness of data representations involving heap.pdf:/home/sonnet/Zotero/storage/GGTIVVB6/Reddy 和 Yang - 2004 - Correctness of data representations involving heap.pdf:application/pdf},
}

@misc{noauthor_improving_nodate,
	title = {Improving the reliability of commodity operating systems {\textbar} {ACM} {Transactions} on {Computer} {Systems}},
	url = {https://dl.acm.org/doi/abs/10.1145/1047915.1047919},
	urldate = {2022-02-22},
}

@article{pakin_comprehensive_nodate,
	title = {The {Comprehensive} {LaTeX} {Symbol} {List}},
	abstract = {This document lists 3300 symbols and the corresponding LATEX commands that produce them. Some of these symbols are guaranteed to be available in every LATEX 2ε system; others require fonts and packages that may not accompany a given distribution and that therefore need to be installed. All of the fonts and packages used to prepare this document—as well as this document itself—are freely available from the Comprehensive TEX Archive Network (http://www.ctan.org/).},
	language = {en},
	author = {Pakin, Scott},
	pages = {105},
	file = {Pakin - The Comprehensive LaTeX Symbol List.pdf:/home/sonnet/Zotero/storage/JGCD4SEK/Pakin - The Comprehensive LaTeX Symbol List.pdf:application/pdf},
}

@inproceedings{mokhov_taxonomy_2008,
	address = {Dordrecht},
	title = {Taxonomy of {Linux} {Kernel} {Vulnerability} {Solutions}},
	isbn = {978-1-4020-8739-4},
	doi = {10.1007/978-1-4020-8739-4_86},
	abstract = {This paper presents the results of a case study on software vulnerability solutions in the Linux kernel. Our major contribution is the introduction of a classification of methods used to solve vulnerabilities. Our research shows that error handling, redesign, and precondition validation are the most used methods in solving vulnerabilities in the Linux kernel. This contribution is accompanied with statistics on the occurrence of the different types of vulnerabilities and their solutions that we observed during our case study, combined with example source code patches. We also combine our findings with existing programming guidelines to create the first security-oriented coding guidelines for the Linux kernel.},
	language = {en},
	booktitle = {Innovative {Techniques} in {Instruction} {Technology}, {E}-learning, {E}-assessment, and {Education}},
	publisher = {Springer Netherlands},
	author = {Mokhov, Serguei A. and Laverdière, Marc-André and Benredjem, Djamel},
	editor = {Iskander, Magued},
	year = {2008},
	keywords = {Code Guideline, Error Handling, Input Validation, Secure Code, Software Vulnerability},
	pages = {485--493},
	file = {Springer Full Text PDF:/home/sonnet/Zotero/storage/G6XBXEZK/Mokhov 等。 - 2008 - Taxonomy of Linux Kernel Vulnerability Solutions.pdf:application/pdf},
}

@inproceedings{chen_polus_2007,
	title = {{POLUS}: {A} {POwerful} {Live} {Updating} {System}},
	shorttitle = {{POLUS}},
	doi = {10.1109/ICSE.2007.65},
	abstract = {This paper presents POLUS, a software maintenance tool capable of iteratively evolving running software into newer versions. POLUS's primary goal is to increase the dependability of contemporary server software, which is frequently disrupted either by external attacks or by scheduled upgrades. To render POLUS both practical and powerful, we design and implement POLUS aiming to retain backward binary compatibility, support for multithreaded software and recover already tainted state of running software, yet with good usability and very low runtime overhead. To demonstrate the applicability of POLUS, we report our experience in using POLUS to dynamically update three prevalent server applications: vsftpd, sshd and apache HTTP server. Performance measurements show that POLUS incurs negligible runtime overhead: a less than 1\% performance degradation (but 5\% for one case). The time to apply an update is also minimal.},
	booktitle = {29th {International} {Conference} on {Software} {Engineering} ({ICSE}'07)},
	author = {Chen, Haibo and Yu, Jie and Chen, Rong and Zang, Binyu and Yew, Pen-Chung},
	year = {2007},
	note = {ISSN: 1558-1225},
	keywords = {Application software, Computer bugs, Degradation, Measurement, Runtime, Software engineering, Software maintenance, Software tools, Usability, Web server},
	pages = {271--281},
	file = {IEEE Xplore Full Text PDF:/home/sonnet/Zotero/storage/LB5NX3D6/Chen 等。 - 2007 - POLUS A POwerful Live Updating System.pdf:application/pdf},
}

@article{gao_approach_2017,
	title = {An {Approach} to {Data} {Consistency} {Checking} for the {Dynamic} {Replacement} of {Service} {Process}},
	volume = {5},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2017.2715322},
	abstract = {The technology of service-oriented architecture (SOA) and Web service provides a promising method to rapidly develop the distributed interoperable system for E-commerce applications at low cost. Due to the cross-organizational feature, the dynamic replacement of service process is an important way to guarantee the correctness of service software evolution, supporting the capacity of handling unexpected service failures. However, considering the new services used in the reconfigured process may be incompatible, data consistency should be checked to ensure that the original business logics can be accurately simulated. In response to this problem, we propose an approach to data consistency checking for the dynamic replacement of service process. First, the behavioral model and data model for formalizing service process are introduced, and then the data consistency problem of dynamic replacement is discussed. Second, the data replacement patterns are presented to specify different kinds of replacement behaviors. Third, the single-service replacement method is used to check the data consistency of an individual service dynamic replacement, which aims to compute the similarity degree between interface data. The multi-services replacement method is employed to check the data consistency of a set of services dynamic replacements, which explores critical paths to substitute a part of service processes. Finally, a case study and experiments demonstrate the effectiveness and efficiency of the proposed methods in the data consistency of dynamic replacement. Our approach provides fundamental theory guidance to enhance the credibility of service process in the modern service industry.},
	journal = {IEEE Access},
	author = {Gao, Honghao and Duan, Yucong and Miao, Huaikou and Yin, Yuyu},
	year = {2017},
	note = {Conference Name: IEEE Access},
	keywords = {Adaptation models, Business, critical path, Data collection, data consistency, Data models, data replacement patterns, IEEE members, Service process modeling, Service-oriented architecture, similarity degree computing, Unified modeling language},
	pages = {11700--11711},
	file = {IEEE Xplore Full Text PDF:/home/sonnet/Zotero/storage/FW5S7G5P/Gao 等。 - 2017 - An Approach to Data Consistency Checking for the D.pdf:application/pdf},
}

@article{ginelli_comprehensive_2021,
	title = {A {Comprehensive} {Study} of {Code}-removal {Patches} in {Automated} {Program} {Repair}},
	url = {http://arxiv.org/abs/2012.06264},
	abstract = {Automatic Program Repair (APR) techniques can promisingly help reducing the cost of debugging. Many relevant APR techniques follow the generate-and-validate approach, that is, the faulty program is iteratively modified with different change operators and then validated with a test suite until a plausible patch is generated. In particular, Kali is a generate-and-validate technique developed to investigate the possibility of generating plausible patches by only removing code. Former studies show that indeed Kali successfully addressed several faults. This paper addresses the case of code-removal patches in automated program repair investigating the reasons and the scenarios that make their creation possible, and the relationship with patches implemented by developers. Our study reveals that code-removal patches are often insufficient to fix bugs, and proposes a comprehensive taxonomy of code-removal patches that provides evidence of the problems that may affect test suites, opening new opportunities for researchers in the field of automatic program repair.},
	urldate = {2022-03-04},
	journal = {arXiv:2012.06264 [cs]},
	author = {Ginelli, Davide and Martinez, Matias and Mariani, Leonardo and Monperrus, Martin},
	month = dec,
	year = {2021},
	note = {arXiv: 2012.06264},
	keywords = {Computer Science - Software Engineering},
	file = {arXiv Fulltext PDF:/home/sonnet/Zotero/storage/V465M4F4/Ginelli 等。 - 2021 - A Comprehensive Study of Code-removal Patches in A.pdf:application/pdf;arXiv.org Snapshot:/home/sonnet/Zotero/storage/IE7GKGQW/2012.html:text/html},
}

@article{hayden_evaluating_2012,
	title = {Evaluating {Dynamic} {Software} {Update} {Safety} {Using} {Systematic} {Testing}},
	volume = {38},
	issn = {1939-3520},
	doi = {10.1109/TSE.2011.101},
	abstract = {Dynamic software updating (DSU) systems patch programs on the fly without incurring downtime. To avoid failures due to the updating process itself, many DSU systems employ timing restrictions. However, timing restrictions are theoretically imperfect, and their practical effectiveness is an open question. This paper presents the first significant empirical evaluation of three popular timing restrictions: activeness safety (AS), which prevents updates to active functions, con-freeness safety (CFS), which only allows modifications to active functions when doing so is provably type-safe, and manual identification of the event-handling loops during which an update may occur. We evaluated these timing restrictions using a series of DSU patches to three programs: OpenSSH, vsftpd, and ngIRCd. We systematically applied updates at each distinct update point reached during execution of a suite of system tests for these programs to determine which updates pass and which fail. We found that all three timing restrictions prevented most failures, but only manual identification allowed none. Further, although CFS and AS allowed many more update points, manual identification still supported updates with minimal delay. Finally, we found that manual identification required the least developer effort. Overall, we conclude that manual identification is most effective.},
	number = {6},
	journal = {IEEE Transactions on Software Engineering},
	author = {Hayden, Christopher M. and Smith, Edward K. and Hardisty, Eric A. and Hicks, Michael and Foster, Jeffrey S.},
	year = {2012},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	keywords = {Dynamic software updating (DSU), hot-swapping, program tracing, Servers, software reliability, Software reliability, Software testing, testing},
	pages = {1340--1354},
	file = {IEEE Xplore Full Text PDF:/home/sonnet/Zotero/storage/6GWUL4TR/Hayden 等。 - 2012 - Evaluating Dynamic Software Update Safety Using Sy.pdf:application/pdf;IEEE Xplore Abstract Record:/home/sonnet/Zotero/storage/P6UFIN6J/6035725.html:text/html},
}

@inproceedings{giuffrida_safe_2012-1,
	title = {Safe and automated state transfer for secure and reliable live update},
	doi = {10.1109/HotSWUp.2012.6226610},
	abstract = {Traditional live update systems offer little or no automated support for state transfer between two different program versions with changes in the program state. In this paper, we report our efforts to build a safe and automated state transfer framework for C programs that requires a minimal number of program state annotations and handles common structural state changes with no programmer assistance. To handle more complex state transformations, the framework includes a number of extension mechanisms designed to minimize the overall programming effort. Our experience with real-world programs suggests that our framework can handle all the standard C idioms and support safe and automated state transfer for complex state changes. We believe our approach is effective in several update scenarios and significantly raises the bar on the security and reliability of live update.},
	booktitle = {2012 4th {International} {Workshop} on {Hot} {Topics} in {Software} {Upgrades} ({HotSWUp})},
	author = {Giuffrida, Cristiano and Tanenbaum, Andrew S.},
	month = jun,
	year = {2012},
	keywords = {Instruments, Libraries, Reliability, Resource management, Runtime, Security, Software},
	pages = {16--20},
	file = {IEEE Xplore Full Text PDF:/home/sonnet/Zotero/storage/Z4R6SQDY/Giuffrida 和 Tanenbaum - 2012 - Safe and automated state transfer for secure and r.pdf:application/pdf},
}

@article{gupta1996formal,
  title={A formal framework for on-line software version change},
  author={Gupta, Deepak and Jalote, Pankaj and Barua, Gautam},
  journal={IEEE Transactions on Software engineering},
  volume={22},
  number={2},
  pages={120--131},
  year={1996},
  publisher={IEEE}
}

@inproceedings{pahole,
  title={The 7 dwarves: debugging information beyond gdb},
  author={de Melo, Arnaldo Carvalho},
  booktitle={Proceedings of the Linux Symposium},
  year={2007},
  organization={Citeseer}
}

@article{DynAMOS,
author = {Makris, Kristis and Ryu, Kyung Dong},
title = {Dynamic and Adaptive Updates of Non-Quiescent Subsystems in Commodity Operating System Kernels},
year = {2007},
issue_date = {June 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {3},
issn = {0163-5980},
url = {https://doi.org/10.1145/1272998.1273031},
doi = {10.1145/1272998.1273031},
abstract = {Continuously running systems require kernel software updates applied to them without downtime. Facilitating fast reboots, or delaying an update may not be a suitable solution in many environments, especially in pay-per-use high-performance computing clusters and mission critical systems. Such systems will not reap the benefits of new kernel features, and will continue to operate with kernel security holes unpatched, at least until the next scheduled maintenance downtime. To address these problems we developed an on-the-fly kernel updating system that enables commodity operating systems to gain adaptive and mutative capabilities without kernel recompilation or reboot. Our system, DynAMOS, employs a novel and efficient dynamic code instrumentation technique termed adaptive function cloning. Execution flow can be switched adaptively among multiple editions of functions, possibly concurrently running. This approach becomes the foundation for dynamic replacement of non-quiescent kernel subsystems when the timeliness of an update depends on synchronization of multiple kernel paths. We illustrate our experience by dynamically updating core subsystems of the Linux kernel.},
journal = {SIGOPS Oper. Syst. Rev.},
month = {mar},
pages = {327–340},
numpages = {14},
keywords = {adaptive operating system, function cloning, DynAMOS, dynamic software updates, dynamic instrumentation}
}

@inproceedings{xu2020automatic,
  title={Automatic hot patch generation for android kernels},
  author={Xu, Zhengzi and Zhang, Yulong and Zheng, Longri and Xia, Liangzhao and Bao, Chenfu and Wang, Zhi and Liu, Yang},
  booktitle={29th USENIX Security Symposium (USENIX Security 20)},
  pages={2397--2414},
  year={2020}
}

@misc{noauthor_2007_nodate,
	title = {2007 {USENIX} {Annual} {Technical} {Conference}},
	url = {https://www.usenix.org/legacy/event/usenix07/tech/full_papers/baumann/baumann_html/},
	urldate = {2022-03-04},
	file = {2007 USENIX Annual Technical Conference:/home/sonnet/Zotero/storage/M2A5JLCX/baumann_html.html:text/html},
}

@misc{noauthor_live_nodate,
	title = {Live updating operating systems using virtualization {\textbar} {Proceedings} of the 2nd international conference on {Virtual} execution environments},
	url = {https://dl.acm.org/doi/abs/10.1145/1134760.1134767},
	urldate = {2022-03-08},
}

@misc{noauthor_ieee_nodate,
	title = {{IEEE} {Xplore} {Full}-{Text} {PDF}:},
	url = {https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=5551162},
	urldate = {2022-03-08},
	file = {IEEE Xplore Full-Text PDF\::/home/sonnet/Zotero/storage/5TC3HCR8/stamp.html:text/html},
}

@misc{noauthor_cetratus_nodate,
	title = {Cetratus: {A} framework for zero downtime secure software updates in safety‐critical systems - {Mugarza} - 2020 - {Software}: {Practice} and {Experience} - {Wiley} {Online} {Library}},
	url = {https://onlinelibrary.wiley.com/doi/full/10.1002/spe.2820},
	urldate = {2022-03-08},
	file = {Cetratus\: A framework for zero downtime secure software updates in safety‐critical systems - Mugarza - 2020 - Software\: Practice and Experience - Wiley Online Library:/home/sonnet/Zotero/storage/24HWRER6/spe.html:text/html},
}

@misc{noauthor_cetratus_nodate-1,
	title = {Cetratus: {A} framework for zero downtime secure software updates in safety‐critical systems - {Mugarza} - 2020 - {Software}: {Practice} and {Experience} - {Wiley} {Online} {Library}},
	url = {https://onlinelibrary.wiley.com/doi/full/10.1002/spe.2820},
	urldate = {2022-03-08},
}

@misc{noauthor_cetratus_nodate-2,
	title = {Cetratus: {A} framework for zero downtime secure software updates in safety‐critical systems - {Mugarza} - 2020 - {Software}: {Practice} and {Experience} - {Wiley} {Online} {Library}},
	url = {https://onlinelibrary.wiley.com/doi/full/10.1002/spe.2820},
	urldate = {2022-03-08},
}

@article{mugarza_cetratus_2020,
	title = {Cetratus: {A} framework for zero downtime secure software updates in safety-critical systems},
	volume = {50},
	issn = {1097-024X},
	shorttitle = {Cetratus},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.2820},
	doi = {10.1002/spe.2820},
	abstract = {Safety-critical systems are evolving into complex, networked, and distributed systems. As a result of the high interconnectivity among all networked systems and of potential security threats, security countermeasures need to be incorporated. Nonetheless, albeit cutting-edge security measures are adopted and incorporated during the system development, such as latest recommended encryption algorithms, these protection mechanisms may turn out obsolete because of the long operational periods. New security flaws and bugs are continuously detected. Software updates are then essential to restore the security level of the system. However, system shutdowns may not be acceptable when high availability is required. As expressed by the European Union Agency for Network and Information Security (ENISA) “the research in the area of patching and updating equipment without disruption of service and tools” is needed. In this article, a novel live updating approach for zero downtime safety-critical systems named Cetratus is presented. Cetratus, which is based on a quarantine-mode execution and monitoring, enables the update of non-safety-critical software components while running, without compromising the safety integrity level of the system. The focus of this work lies on the incorporation of leading-edge security mechanisms while safety-related software components will remain untouched. Other non-safety-related software components could also be updated.},
	language = {en},
	number = {8},
	urldate = {2022-03-08},
	journal = {Software: Practice and Experience},
	author = {Mugarza, Imanol and Parra, Jorge and Jacob, Eduardo},
	year = {2020},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.2820},
	keywords = {availability, Cetratus, dynamic software updates, live patching, live updates, safety, security},
	pages = {1399--1424},
	file = {Full Text PDF:/home/sonnet/Zotero/storage/3MRW2QTF/Mugarza 等。 - 2020 - Cetratus A framework for zero downtime secure sof.pdf:application/pdf},
}

@inproceedings{mugarza_cetratus_2018,
	address = {Graz},
	title = {Cetratus: {Towards} a live patching supported runtime for mixed-criticality safe and secure systems},
	isbn = {978-1-5386-4155-2},
	shorttitle = {Cetratus},
	url = {https://ieeexplore.ieee.org/document/8442088/},
	doi = {10.1109/SIES.2018.8442088},
	abstract = {Because of the high interconnectivity demanded in the Industrial Internet of Things (IIoT), security concerns arise for those safety-critical systems in which connectivity is required. These systems, which execute both safety and security functions, are deﬁned as mixed-critical systems. Nevertheless, the adopted protection mechanisms may suddenly become out-of-date. From the security point of view, software updates are crucial to resolve those security issues that appear while long operational periods of mixed-critical systems. Besides, system halt and restarts due to software upgrades may not be admissible from the business and service point of view. As stated by the European Union Agency for Network and Information Security (ENISA), “the research in the area of patching and updating equipment without disruption of service and tools” is necessary. In this paper, we present Cetratus, a novel live patching supported framework for mixed-critical systems. The proposed solution aims at bringing up to date security protection measures without system shutdown, or compromising the safety integrity level.},
	language = {en},
	urldate = {2022-03-08},
	booktitle = {2018 {IEEE} 13th {International} {Symposium} on {Industrial} {Embedded} {Systems} ({SIES})},
	publisher = {IEEE},
	author = {Mugarza, Imanol and Parra, Jorge and Jacob, Eduardo},
	month = jun,
	year = {2018},
	pages = {1--8},
	file = {Mugarza 等。 - 2018 - Cetratus Towards a live patching supported runtim.pdf:/home/sonnet/Zotero/storage/3SRF3KTW/Mugarza 等。 - 2018 - Cetratus Towards a live patching supported runtim.pdf:application/pdf},
}
